<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title>‚è≤ Store Of Time</title>
<meta name="description" content="Explore how the value of time traded for money changes when stored in Bitcoin, Local Currency, USD, Gold or Silver." />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content="@alex_kaul"">
<meta name="twitter:site" content="@alex_kaul"">
<meta name="twitter:title" content="‚è≤ Store Of Time" />
<meta name="twitter:description" content="Explore how the value of time traded for money changes when stored in Bitcoin, Local Currency, USD, Gold or Silver." />
<meta name="twitter:image" content="https://storeoftime.com/assets/og-1200x628.png" />
<meta property="og:title" content="‚è≤ Store Of Time" />
<meta property="og:description" content="Explore how the value of time traded for money changes when stored in Bitcoin, Local Currency, USD, Gold or Silver." />
<meta property="og:url" content="https://storeoftime.com/" />
<meta property="og:image" content="https://storeoftime.com/assets/og-1200x628.png" />
<style>
  .bitcoin-color {
    color: <%= something.colors.bitcoin %>;
  }
  .icon {
    font-size: 128px;
    line-height: 1;
    margin: 0;
  }
  .logo {
    text-align: center;
  }
  .logo > img {
    width: 128px;
  }
  body {
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    padding:32px;
    background: <%= something.colors.background %>;
  }
  h1 {
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size:40px;
    font-weight:800;
  }
  header {
    text-align:center;
  }
  .main {
    text-align:center;
  }
  .main, .main select {
    font-size: 24px;
    line-height: 2;
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  .main select {
    font-weight:800;
  }
  .main-block {
    margin: 12px 0;
  }
  .inline-block {
    display: inline-block;
  }
  select {
    border:4px solid <%= something.colors.primary %>;
    border-radius: 6px;
    color: <%= something.colors.primary %>;
    cursor:pointer;
    opacity:0.78;
  }
  .sel-curr {
    color: <%= something.colors.secondary %>;
    border-color: <%= something.colors.secondary %>;
  }
  .sel-curr.bitcoin-color {
    color: <%= something.colors.bitcoin %>;
    border-color: <%= something.colors.bitcoin %>;
  }
  select:hover {
    opacity:1;
  }
  a {
    color:<%= something.colors.primary %>;
    font-weight: bold;
    opacity:0.8;
  }
  a:hover {
    opacity:1;
  }
  .chart {
    margin: 32px 0;
  }

  .info, .footer {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    width: 100%;
    margin: -12px;
  }

  .info-block, .footer-block {
    flex: 1;
    margin: 12px;
  }

  @media (max-width: 600px) {
		body {
			padding:0;
		}
		.chart,
		#chart {
			height:50vh;
		}
    .main-block {
      margin: 16px 0;
    }
	}

  @media (max-width: 800px) {
    .info, .footer {
      flex-direction: column;
    }
  }

  @media (min-width: 801px) {
    .footer-block:last-child {
      text-align: right;
    }
  }

  @media (max-width: 1200px) {
    .info-block {
      flex-basis: 40%;
    }
  }
</style>
</head>

<body>
<header>
  <div class="logo"><img src="/assets/logo.svg" alt="Logo" /></div>
  <h1>Store of Time</h1>
</header>

<section class="main">
  <div class="main-block">
    <span class="inline-block"><b>1 Day of Work</b></span>

    <span class="inline-block">traded for money</span>

    <span class="inline-block">
      in
      <select class="sel-country">
        <% Object.values(countries).sort((v1,v2) => v1[0] > v2[0] ? 1 : -1).forEach((country) => { %>
        <option value="<%= country[2] %>"<%= (country[2] === something.countries.default ? " selected" : "") %>><%= country[0] %></option>
        <% }) %>
      </select>
    </span>

    <span class="inline-block">
      in
      <select class="sel-year">
        <% for (let year = something.year.from; year < (new Date()).getUTCFullYear(); year++) { %>
        <option value="<%= year %>"<%= (year === something.year.default ? " selected" : "") %>><%= year %></option>
        <% } %>
      </select>
    </span>

    <span class="inline-block">
      and stored in
      <select class="sel-curr bitcoin-color">
        <option value="BTC">Bitcoin</option>
        <option value="local">Local Currency</option>
        <option value="USD">USD</option>
        <% Object.getOwnPropertyNames(something.stores).forEach((curr) => { %>
          <option value="<%= curr %>"><%= something.stores[curr] %></option>
        <% }) %>
      </select>
    </span>
  </div>

  <div class="main-block">
    <span class="inline-block">
      today has value of
    </span>
    <span class="inline-block">
      <b><span class="thing-now-qty">‚è≥</span> Days of Work</b>
    </span>
  </div>
</section>

<section class="chart">
	<canvas id="chart" width="500" height="400"></canvas>
</section>

<section class="info">
  <div class="info-block">
    <h2>üìà Data</h2>
    <p>Consumer Price Index data provided by <a href="https://www.imf.org/" target="_blank">International Monetary Fund</a>.</p>
    <p>Exchange Rates data provided by <a href="https://openexchangerates.org/" target="_blank">Open Exchange Rates</a>.</p>
  </div>
  <div class="info-block">
    <h2>üßô Open Source</h2>
    <p>Found a bug or think the website is missing a feature? It is open source and <a href="https://github.com/alexk111/StoreOfTime.com" target="_blank">available on GitHub</a>, so feel free to create an issue or a pull request.</p>
    <p>Have a price history dataset for something? Make your <a href="https://github.com/alexk111/store-of-something" target="_blank">Store of {Something}</a> website from it.</p>
  </div>
  <% if (something.credits && something.credits.length) { %>
  <div class="info-block">
    <h2>üôè Other Credits</h2>
    <p>Emoji pics at the header are provided by <a href="https://openmoji.org/library/" target="_blank">OpenMoji</a>.</p>
  </div>
  <% } %>
</section>

<hr />

<footer class="footer">
  <div class="footer-block">
    Made with <a href="https://twitter.com/alex_kaul" target="_blank">@alex_kaul</a>‚Äôs ‚è≤ and <a href="https://github.com/alexk111/store-of-something" target="_blank">Store of {Something}</a>.
  </div>
  <div class="footer-block">
    Last update: <%= new Date().toISOString().slice(0,10); %>
  </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js" integrity="sha256-t9UJPrESBeG2ojKTIcFLPGF7nHi2vEc7f5A2KpH/UBU=" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>

<%- `<script>const countries=${JSON.stringify(countries)};</script>`; %>
<%- `<script>const preloadedData={}; preloadedData["${something.countries.default}"]=${JSON.stringify(thingPrices[something.countries.default])};</script>`; %>

<script>
  /**
   * CACHE
   */

  const thingTimePriceByCountryCache = {};

  function addThingTimePriceToCache(countryCode, data) {
    const processedData = {};
    for (let currCode in data) {
      data[currCode].sort((v1,v2) => v1[0] > v2[0] ? 1 : -1);
      for (let i = 0; i<data[currCode].length; i++) {
        const arrYYYYMMDD = data[currCode][i][0].split("-");
        const y = arrYYYYMMDD[0]*1;
        const m = arrYYYYMMDD[1]*1;
        const d = arrYYYYMMDD[2]*1;
        const timestamp = Date.UTC(y,m-1,d,0,0,0);
        data[currCode][i].push(y, m, d, timestamp);
      }
    }
    thingTimePriceByCountryCache[countryCode] = data;
  }

  function getThingTimePriceByCountry(countryCode, cb) {
    if (thingTimePriceByCountryCache[countryCode]) {
      return cb(thingTimePriceByCountryCache[countryCode]);
    }

    $.get('data/' + countryCode + '.json', function (data) {
      addThingTimePriceToCache(countryCode, data);
      return cb(thingTimePriceByCountryCache[countryCode]);
    }, "json");
  }

  if (preloadedData) {
    for (let countryCode in preloadedData) {
      addThingTimePriceToCache(countryCode, preloadedData[countryCode]);
    }
    delete preloadedData;
  }


  /**
   * INIT CHART
   */
  const ctx = document.getElementById('chart').getContext('2d');
  const chart = new Chart(ctx, {
    type: 'line',
    plugins: [{
      afterLayout: function (chart) {
        var ctx = chart.chart.ctx;
        var xAxis = chart.scales['x-axis-0'];
        var gradientStroke = ctx.createLinearGradient(xAxis.left, 0, xAxis.right, 0);
        var dataset = chart.data.datasets[0];
        if (dataset) {
          dataset.colors.forEach((c, i) => {
            var stop = 1 / (dataset.colors.length - 1) * i;
            gradientStroke.addColorStop(stop, dataset.colors[i]);
          });
          dataset.backgroundColor = gradientStroke;
          dataset.borderColor = gradientStroke;
        }
      }
    }],
    data: {
      // added dynamically
    },
    options: {
      animation: false,
      elements: {
        point: {
          radius: 0
        },
        line: {
          tension: 0.15
        }
      },
      legend: {
        display: false
      },
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        xAxes: [
          {
            position: "bottom",
            ticks: {
              fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
              labelOffset: 18,
              maxTicksLimit:12,
              padding:14
            }
          }
        ],
        yAxes: [
          {
            stacked:false,
            position:'left',
            gridLines:{
              display:true
            },
            ticks: {
              autoSkip: true,
              callback: function(t) {
                  return "<%= something.icon %>√ó" + toFormattedNum(t);
              },
              fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
              fontSize: 12,
              maxRotation: 0,
              maxTicksLimit: 12,
              padding: 14
            }
          }
        ]
      },
      tooltips: {
        mode:'x-axis',
        intersect:false,
        callbacks: {
          label: function(tooltipItem, _data) {
            return '<%= something.icon %>√ó' + toFormattedNum(tooltipItem.yLabel);
          }
        }
      }
    }
  });

	$(function () {
		$('.sel-country').on('change', function() {
      updateScreen();
    });
		$('.sel-year').on('change', function() {
      updateScreen();
    });
		$('.sel-curr').on('change', function() {
      updateScreen();
    });

		updateScreen();
	});

  /**
   * FUNCTIONS
   */
  function timestampToYYYYMMDD(ts) {
    return new Date(ts).toISOString().slice(0,10);
  }

  function toFormattedNum(val) {
    return (val*1).toFixed(2);
  }

  function updateScreen() {
    const selCountry=$('.sel-country').val();

    getThingTimePriceByCountry(selCountry, function (thingTimePriceCountryData) {
      const selCurr=$('.sel-curr').val();
      const thingTimePrice = thingTimePriceCountryData[selCurr];

      if (selCurr==='BTC') {
        $('.sel-curr').addClass('bitcoin-color');
      } else {
        $('.sel-curr').removeClass('bitcoin-color');
      }

      const data = {
        labels: [],
        datasets: []
      };

      const dataset = {
        fill: false,
        colors: []
      };

      if (thingTimePrice && thingTimePrice.length > 0) {
        const minYear = thingTimePrice[0][3];

        if ($('.sel-year').val()*1 < minYear) {
          $('.sel-year').val(minYear);
        }
        $('.sel-year option').each(function () {
          $(this).prop("disabled", $(this).val()*1 < minYear);
        });

        const selYear=$('.sel-year').val()*1;

        const fromTimestamp = Date.UTC(selYear*1,0,1,0,0,0);

        let curThingTimePriceIdx = 0;

        // skip items earlier than picked year
        while((curThingTimePriceIdx < thingTimePrice.length) && (thingTimePrice[curThingTimePriceIdx][6])<fromTimestamp) {
          curThingTimePriceIdx++;
        }

        if (curThingTimePriceIdx < thingTimePrice.length) {
          const lockedValueInCurr = thingTimePrice[curThingTimePriceIdx][1];

          const datasetData = [];
          for (; curThingTimePriceIdx < thingTimePrice.length; curThingTimePriceIdx++) {
            data.labels.push(thingTimePrice[curThingTimePriceIdx][0]);
            const curThingTimePrice = thingTimePrice[curThingTimePriceIdx][1];
            const dataVal = curThingTimePrice !== null ? lockedValueInCurr / curThingTimePrice : null;
            datasetData.push(dataVal);
            if (thingTimePrice[curThingTimePriceIdx][2] === 1) {
              dataset.colors.push("<%= something.colors.primary %>");
            } else {
              dataset.colors.push("<%= something.colors.secondary %>");
            }
          }
          dataset.data = datasetData;
        }
      }

      if (dataset.data !== undefined) {
        data.datasets.push(dataset);
        const lastVal = dataset.data[dataset.data.length-1];
        if (lastVal) {
          $('.thing-now-qty').text(toFormattedNum(lastVal));
        } else {
          $('.thing-now-qty').text('?');
        }
      } else {
        $('.thing-now-qty').text('?');
      }

      chart.data = data;
      chart.update();
    });
  }
</script>

</body>
</html>