<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title><%= something.website.title; %></title>
<meta name="description" content="<%= something.website.description; %>" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content="<%= something.website.twitter.creator; %>">
<meta name="twitter:site" content="<%= something.website.twitter.site; %>">
<meta name="twitter:title" content="<%= something.website.title; %>" />
<meta name="twitter:description" content="<%= something.website.description; %>" />
<meta name="twitter:image" content="<%= something.website.rootUrl; %>assets/og-1200x628.png" />
<meta property="og:title" content="<%= something.website.title; %>" />
<meta property="og:description" content="<%= something.website.description; %>" />
<meta property="og:url" content="<%= something.website.rootUrl; %>" />
<meta property="og:image" content="<%= something.website.rootUrl; %>assets/og-1200x628.png" />
<style>
  .bitcoin-color {
    color: <%= something.colors.bitcoin %>;
  }
  .icon {
    font-size: 128px;
    line-height: 1;
    margin: 0;
  }
  .logo {
    text-align: center;
  }
  .logo > img {
    width: 128px;
  }
  body {
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    padding:32px;
    background: <%= something.colors.background %>;
  }
  h1 {
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size:40px;
    font-weight:800;
  }
  header {
    text-align:center;
  }
  .main {
    text-align:center;
  }
  .main, .main select {
    font-size: 24px;
    line-height: 2;
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  .main select {
    font-weight:800;
  }
  .main-block {
    margin: 12px 0;
  }
  .inline-block {
    display: inline-block;
  }
  select {
    border:4px solid <%= something.colors.primary %>;
    border-radius: 6px;
    color: <%= something.colors.primary %>;
    cursor:pointer;
    opacity:0.78;
  }
  .sel-curr {
    color: <%= something.colors.secondary %>;
    border-color: <%= something.colors.secondary %>;
  }
  .sel-curr.bitcoin-color {
    color: <%= something.colors.bitcoin %>;
    border-color: <%= something.colors.bitcoin %>;
  }
  select:hover {
    opacity:1;
  }
  a {
    color:<%= something.colors.primary %>;
    font-weight: bold;
    opacity:0.8;
  }
  a:hover {
    opacity:1;
  }
  .chart {
    margin: 32px 0;
  }

  .info, .footer {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    width: 100%;
    margin: -12px;
  }

  .info-block, .footer-block {
    flex: 1;
    margin: 12px;
  }

  @media (max-width: 600px) {
		body {
			padding:0;
		}
		.chart,
		#chart {
			height:50vh;
		}
    .main-block {
      margin: 16px 0;
    }
	}

  @media (max-width: 800px) {
    .info, .footer {
      flex-direction: column;
    }
  }

  @media (min-width: 801px) {
    .footer-block:last-child {
      text-align: right;
    }
  }

  @media (max-width: 1200px) {
    .info-block {
      flex-basis: 40%;
    }
  }
</style>
</head>

<body>
<header>
  <% if (!something.logo) { %>
    <p class="icon"><%= something.icon; %></p>
  <% } else { %>
    <div class="logo"><img src="<%= something.logo; %>" alt="Logo" /></div>
  <% } %>
  <h1>Store of <%= something.plural; %></h1>
</header>

<section class="main">
  <div class="main-block">
    <span class="inline-block">Monetary value of</span>

    <span class="inline-block"><b>1 <%= something.singular; %></b></span>

    <span class="inline-block">
      <%= something.category.in %>
      <select class="sel-category">
        <% Object.getOwnPropertyNames(thingPrices).sort().forEach((category) => { %>
        <option value="<%= category %>"<%= (category === something.category.default ? " selected" : "") %>><%= category %></option>
        <% }) %>
      </select>
    </span>

    <span class="inline-block">
      in
      <select class="sel-year">
        <% for (let year = something.year.from; year < (new Date()).getUTCFullYear(); year++) { %>
        <option value="<%= year %>"<%= (year === something.year.default ? " selected" : "") %>><%= year %></option>
        <% } %>
      </select>
    </span>

    <span class="inline-block">
      stored in
      <select class="sel-curr bitcoin-color">
        <option value="btc">Bitcoin</option>
        <option value="usd">USD</option>
        <% Object.getOwnPropertyNames(something.stores).forEach((curr) => { %>
          <option value="<%= curr %>"><%= something.stores[curr] %></option>
        <% }) %>
      </select>
    </span>
  </div>

  <div class="main-block">
    <span class="inline-block">
      today would get
    </span>
    <span class="inline-block">
      <b><span class="thing-now-qty">‚è≥</span> <%= something.plural; %></b>
    </span>
  </div>
</section>

<section class="chart">
	<canvas id="chart" width="500" height="400"></canvas>
</section>

<section class="info">
  <div class="info-block">
    <h2>üìà Data</h2>
    <% if (something.dataSources && something.dataSources.length) { %>
    <%   something.dataSources.forEach((item) => { %>
    <p><%= item.what %> provided by <a href="<%= item.link %>" target="_blank"><%= item.providedBy %></a>.</p>
    <%   }) %>
    <% } %>
    <p>Bitcoin vs USD/XAU/XAG data provided by <a href="https://www.coingecko.com/en/api" target="_blank">CoinGecko API</a>.</p>
  </div>
  <div class="info-block">
    <h2>üßô Open Source</h2>
    <p>Found a bug or think the website is missing a feature? It is <a href="<%= something.repoLink %>" target="_blank">open source</a>, so feel free to contribute.</p>
    <p>Have a price history dataset for something? Make your <a href="https://github.com/alexk111/store-of-something" target="_blank">Store of {Something}</a> website from it.</p>
  </div>
  <% if (something.credits && something.credits.length) { %>
  <div class="info-block">
    <h2>üôè Other Credits</h2>
    <% something.credits.forEach((item) => { %>
    <p><%= item.what %> provided by <a href="<%= item.link %>" target="_blank"><%= item.providedBy %></a>.</p>
    <% }) %>
  </div>
  <% } %>
</section>

<hr />

<footer class="footer">
  <div class="footer-block">
    Made by <a href="<%= something.madeBy.link %>" target="_blank"><%= something.madeBy.idOrName %></a>, with <a href="https://github.com/alexk111/store-of-something" target="_blank">Store of {Something}</a>.
  </div>
  <div class="footer-block">
    Last update: <%= new Date().toISOString().slice(0,10); %>
  </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js" integrity="sha256-t9UJPrESBeG2ojKTIcFLPGF7nHi2vEc7f5A2KpH/UBU=" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>

<%- `<script>const thingPrices=${JSON.stringify(thingPrices)};</script>`; %>
<%- `<script>const storePrices=${JSON.stringify(storePrices)};</script>`; %>

<script>
  /**
   * INIT DATA
   */
  const arrThingTimePrice = {};
  const arrStoreTimePrice = {};

  for (let category in thingPrices) {
    arrThingTimePrice[category] = [];
    for (let year in thingPrices[category]) {
      for (let month in thingPrices[category][year]) {
        for (let date in thingPrices[category][year][month]) {
          let ts = Date.UTC(year, month-1, date, 0,0,0,0);
          arrThingTimePrice[category].push([ts, thingPrices[category][year][month][date]]);
        }
      }
    }
    arrThingTimePrice[category] = arrThingTimePrice[category].sort(function(v1,v2) {
      return v1[0] - v2[0];
    });
  }
  for (let curr in storePrices) {
    arrStoreTimePrice[curr] = [];
    for (let year in storePrices[curr]) {
      for (let month in storePrices[curr][year]) {
        for (let date in storePrices[curr][year][month]) {
          let ts = Date.UTC(year, month-1, date, 0,0,0,0);
          arrStoreTimePrice[curr].push([ts, storePrices[curr][year][month][date]]);
        }
      }
    }
    arrStoreTimePrice[curr] = arrStoreTimePrice[curr].sort(function(v1,v2) {
      return v1[0] - v2[0];
    });
  }

  /**
   * INIT CHART
   */
  const ctx = document.getElementById('chart').getContext('2d');
  const chart = new Chart(ctx, {
    type: 'line',
    data: {
      // added dynamically
    },
    options: {
      animation: false,
      elements: {
        point: {
          radius: 0
        },
        line: {
          tension: 0.15
        }
      },
      legend: {
        display: false
      },
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        xAxes: [
          {
            position: "bottom",
            ticks: {
              fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
              labelOffset: 18,
              maxTicksLimit:12,
              padding:14
            }
          }
        ],
        yAxes: [
          {
            stacked:false,
            position:'left',
            gridLines:{
              display:true
            },
            ticks: {
              autoSkip: true,
              callback: function(t) {
                  return "<%= something.icon %>√ó" + toFormattedNum(t);
              },
              fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
              fontSize: 12,
              maxRotation: 0,
              maxTicksLimit: 12,
              padding: 14
            }
          }
        ]
      },
      tooltips: {
        mode:'x-axis',
        intersect:false,
        callbacks: {
          label: function(tooltipItem, _data) {
            return '<%= something.icon %>√ó' + toFormattedNum(tooltipItem.yLabel);
          }
        }
      }
    }
  });

	$(function () {
		$('.sel-category').on('change', function() {
      updateScreen();
    });
		$('.sel-year').on('change', function() {
      updateScreen();
    });
		$('.sel-curr').on('change', function() {
      updateScreen();
    });

		updateScreen();
	});

  /**
   * FUNCTIONS
   */
  function timestampToYYYYMMDD(ts) {
    return new Date(ts).toISOString().slice(0,10);
  }

  function toFormattedNum(val) {
    return (val*1).toFixed(2);
  }

  function updateScreen() {
    const selCategory=$('.sel-category').val();

    const thingTimePrice = arrThingTimePrice[selCategory];
    const minYear = new Date(thingTimePrice[0][0]).getUTCFullYear();
    if ($('.sel-year').val()*1 < minYear) {
      $('.sel-year').val(minYear);
    }
    $('.sel-year option').each(function () {
      $(this).prop("disabled", $(this).val()*1 < minYear);
    });

		const selYear=$('.sel-year').val();
    const selCurr=$('.sel-curr').val();

    const selYearTimestamp = Date.UTC(selYear*1,0,1,0,0,0);

    if (selCurr==='btc') {
      $('.sel-curr').addClass('bitcoin-color');
    } else {
      $('.sel-curr').removeClass('bitcoin-color');
    }

    const data = {
      labels: [],
      datasets: []
    };

    const dataset = {
      backgroundColor: '<%= something.colors.primary %>',
      borderColor: '<%= something.colors.primary %>',
      fill: false
    };

    if (thingTimePrice && thingTimePrice.length > 0) {
      let curThingTimePriceIdx = 0;

      // skip items earlier than picked year
      while((curThingTimePriceIdx < thingTimePrice.length) && (thingTimePrice[curThingTimePriceIdx][0])<selYearTimestamp) {
        curThingTimePriceIdx++;
      }

      if (curThingTimePriceIdx < thingTimePrice.length) {
        if (selCurr !== "usd") {
          const thingFirstTime = thingTimePrice[curThingTimePriceIdx][0]; // anything before this timestamp should be ignored
          const thingFirstPrice = thingTimePrice[curThingTimePriceIdx][1];

          const storeTimePrice = arrStoreTimePrice[selCurr];

          // move store data pointer at the intersection with thing's first timestamp
          let curStoreTimePriceIdx = 0;
          while ((curStoreTimePriceIdx < storeTimePrice.length) && (storeTimePrice[curStoreTimePriceIdx][0] < thingFirstTime)) {
            curStoreTimePriceIdx++;
          }

          // now we are ready to build the datasets for the chart
          if (curStoreTimePriceIdx < storeTimePrice.length) {
            const storeFirstTime = storeTimePrice[curStoreTimePriceIdx][0];
            const storeFirstPrice = storeTimePrice[curStoreTimePriceIdx][1];

            const lockedValueInCurr = thingFirstPrice / storeFirstPrice;

            const datasetData = [];

            while (curStoreTimePriceIdx < storeTimePrice.length) {
              // move pointer to the actual thing's price
              while ((curThingTimePriceIdx < thingTimePrice.length-1) && (thingTimePrice[curThingTimePriceIdx+1][0] <= storeTimePrice[curStoreTimePriceIdx][0])) {
                curThingTimePriceIdx++;
              }

              data.labels.push(timestampToYYYYMMDD(storeTimePrice[curStoreTimePriceIdx][0]));
              let curValueInUSD = lockedValueInCurr * storeTimePrice[curStoreTimePriceIdx][1];
              datasetData.push(curValueInUSD / thingTimePrice[curThingTimePriceIdx][1]);

              curStoreTimePriceIdx++;
            }
            dataset.data = datasetData
          }
        } else {
          const lockedValueInCurr = thingTimePrice[curThingTimePriceIdx][1];

          const datasetData = [];

          for (; curThingTimePriceIdx < thingTimePrice.length; curThingTimePriceIdx++) {
            data.labels.push(timestampToYYYYMMDD(thingTimePrice[curThingTimePriceIdx][0]));
            datasetData.push(lockedValueInCurr / thingTimePrice[curThingTimePriceIdx][1]);
          }
          dataset.data = datasetData
        }
      }
    }

    if (dataset.data !== undefined) {
      data.datasets.push(dataset);
      $('.thing-now-qty').text(toFormattedNum(dataset.data[dataset.data.length-1]));
    } else {
      $('.thing-now-qty').text('?');
    }

    chart.data = data;
		chart.update();
  }
</script>

</body>
</html>